plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.compose'
    id "io.gitlab.arturbosch.detekt" version "$version_detekt_tool"
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    namespace 'com.example.quizler'

    compileSdk 35

    defaultConfig {
        applicationId "com.wombatech.quizler"
        minSdk 24
        targetSdk 35
        versionCode 35
        versionName "1.1.2"

        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').canRead()) {
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
        }
        buildConfigField "String", "SERVER_URL", properties.getProperty('QUIZLER_SERVER_URL', '"192.168.1.113:2000"')

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables { useSupportLibrary true }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        multiDexEnabled true
        signingConfig signingConfigs.debug
    }

    testOptions {
        packagingOptions {
            jniLibs { useLegacyPackaging true }
        }
        unitTests.all {
            useJUnitPlatform()
        }
    }

    sourceSets {
        main { java.srcDirs = ['src/main/java'] }
        test { java.srcDirs = ['src/test/java'] }
        androidTest { java.srcDirs = ['src/androidTest/java'] }
    }

    configurations { ktlint }

    detekt {
        toolVersion = "$version_detekt_tool"
        config = files("config/detekt/detekt.yml")
        buildUponDefaultConfig = true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug { }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        compose true
        viewBinding true
        buildConfig true
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/*'
            excludes += "META-INF/*.version"
        }
    }
    androidComponents {
        onVariants(selector().withBuildType("release")) {
            it.packaging.resources.excludes.add("META-INF/*.version")
        }
    }
}

dependencies {
    implementation platform("androidx.compose:compose-bom:$version_compose_bom")

    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation "androidx.compose.material3:material3"
    implementation "androidx.compose.animation:animation"
    implementation "androidx.compose.runtime:runtime"
    debugImplementation "androidx.compose.ui:ui-tooling"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    debugImplementation "androidx.compose.ui:ui-test-manifest"

    // Activity/Compose (not in Compose BOM)
    implementation "androidx.activity:activity-compose:1.10.1"

    // ConstraintLayout (Compose)
    implementation "androidx.constraintlayout:constraintlayout-compose:$version_compose_constraint_layout"

    // AppCompat / Core / Material
    implementation "androidx.appcompat:appcompat:$version_appcompat"
    implementation "androidx.core:core-ktx:$version_core_ctx"
    implementation "com.google.android.material:material:1.12.0"

    // Retrofit & Gson
    implementation "com.squareup.retrofit2:retrofit:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$version_retrofit"
    implementation "com.google.code.gson:gson:$version_gson"

    // Room, TODO: (refactor to kapt)
    implementation "androidx.room:room-runtime:$version_room"
    implementation "androidx.room:room-ktx:$version_room"
    annotationProcessor "androidx.room:room-compiler:$version_room"
    kapt "androidx.room:room-compiler:$version_room"

    // Timber
    implementation "com.jakewharton.timber:timber:$version_timber"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$version_lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$version_lifecycle"
    implementation "androidx.lifecycle:lifecycle-service:$version_lifecycle_service"

    // Navigation (Fragments/UI KTX) + Navigation Compose
    implementation "androidx.navigation:navigation-fragment-ktx:$version_navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$version_navigation"
    implementation "androidx.navigation:navigation-compose:$version_navigation"

    // DataStore Preferences
    implementation "androidx.datastore:datastore-preferences:$version_datastore"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_coroutines"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutines"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutines"

    // WorkManager + Hilt-Work
    implementation "androidx.work:work-runtime-ktx:$version_work_manager"
    implementation 'androidx.hilt:hilt-work:1.2.0'
    kapt 'androidx.hilt:hilt-compiler:1.2.0'

    // Hilt
    implementation "com.google.dagger:hilt-android:$version_hilt"
    kapt "com.google.dagger:hilt-compiler:$version_hilt_compiler"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$version_hilt_android_testing"
    implementation "androidx.hilt:hilt-navigation-compose:1.2.0"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$version_hilt_android_test_compiler"
    testImplementation "com.google.dagger:hilt-android-testing:$version_hilt_testing"
    kaptTest "com.google.dagger:hilt-android-compiler:$version_hilt_compiler"

    // Accompanist Pager
    implementation "com.google.accompanist:accompanist-pager:$version_accompanist_pager"
    implementation "com.google.accompanist:accompanist-pager-indicators:$version_accompanist_pager"

    // Firebase (BoM)
    implementation platform('com.google.firebase:firebase-bom:34.1.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'

    // Test
    testImplementation "junit:junit:$version_junit"
    testImplementation "io.mockk:mockk:$version_mockk"
    testImplementation "org.hamcrest:hamcrest-library:$version_hamcrest"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutines"

    // Android test
    androidTestImplementation "androidx.test.ext:junit:$version_junit_extensions"
    androidTestImplementation "androidx.test.espresso:espresso-core:$version_espresso_core"
}

kapt {
    correctErrorTypes true
}

configurations { ktlint }
dependencies { ktlint "com.pinterest.ktlint:ktlint-cli:$version_ktlint" }

tasks.register('ktlint', JavaExec) {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "src/**/*.kt"
}
check.dependsOn ktlint

tasks.register('ktlintFormat', JavaExec) {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "-F", "src/**/*.kt"
    jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
}