plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "io.gitlab.arturbosch.detekt" version "$version_detekt_tool"
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.wombatech.quizler"
        minSdk 24
        targetSdk 33
        versionCode 12
        versionName "1.0.0-beta12"

        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').canRead()) {
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
        }

        buildConfigField "String", "SERVER_URL", properties.getProperty('QUIZLER_SERVER_URL', '"192.168.1.113:2000"')

        testInstrumentationRunner "com.example.mumble.HiltTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
        multiDexEnabled true
        signingConfig signingConfigs.debug
    }
    testOptions {
        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }
    }
    configurations {
        ktlint
    }
    detekt {
        toolVersion = "$version_detekt_tool"
        config = files("config/detekt/detekt.yml")
        buildUponDefaultConfig = true
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "$version_compose_compiler"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/*'
            excludes += "META-INF/*.version"
        }
    }
    androidComponents {
        onVariants(selector().withBuildType("release")) {
            // Exclude AndroidX version files
            it.packaging.resources.excludes.add("META-INF/*.version")
        }
    }
    namespace 'com.example.quizler'
}

dependencies {

    // AppCompat
    implementation "androidx.appcompat:appcompat:$version_appcompat"
    implementation "androidx.appcompat:appcompat-resources:$version_appcompat"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$version_retrofit"

    // Room
    implementation "androidx.room:room-runtime:$version_room"
    implementation 'androidx.core:core-ktx:1.7.10'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    annotationProcessor "androidx.room:room-compiler:$version_room"
    kapt "androidx.room:room-compiler:$version_room"
    implementation "androidx.room:room-ktx:$version_room"

    // Timber
    implementation "com.jakewharton.timber:timber:$version_timber"

    // Lifecycle services
    implementation "androidx.lifecycle:lifecycle-service:$version_lifecycle_service"
    ktlint "com.pinterest:ktlint:$version_ktlint"

    // Core CTX
    implementation "androidx.core:core-ktx:$version_core_ctx"

    // Jetpack Compose
    implementation "androidx.compose.ui:ui:1.3.2"
    implementation "androidx.constraintlayout:constraintlayout-compose:$version_compose_constraint_layout"
    implementation "androidx.compose.material3:material3:$version_compose_material_3"
    implementation "androidx.compose.animation:animation:$version_compose_animation"
    implementation "androidx.compose.ui:ui-tooling-preview:$version_compose"
    implementation "androidx.compose.runtime:runtime:$version_compose"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$version_compose_lifecycle"
    implementation "androidx.activity:activity-compose:$version_compose_compiler"
    implementation "androidx.compose.compiler:compiler:1.3.2"

    // Pager and Indicators - Accompanist
    implementation "com.google.accompanist:accompanist-pager:$version_accompanist_pager"
    implementation "com.google.accompanist:accompanist-pager-indicators:$version_accompanist_pager"


    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_coroutines"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutines"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutines"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$version_lifecycle"

    // Navigation
    implementation "androidx.navigation:navigation-compose:$version_navigation"

    // DataStore Preferences
    implementation "androidx.datastore:datastore-preferences:$version_datastore"

    // Hilt
    implementation "com.google.dagger:hilt-android:$version_hilt"
    kapt "com.google.dagger:hilt-compiler:$version_hilt_compiler"
    implementation "androidx.hilt:hilt-navigation-compose:$version_hilt_compose"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$version_hilt_android_testing"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$version_hilt_android_test_compiler"
    testImplementation "com.google.dagger:hilt-android-testing:$version_hilt_testing"
    kaptTest "com.google.dagger:hilt-android-compiler:$version_hilt_compiler"

    // Gson
    implementation "com.google.code.gson:gson:$version_gson"

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$version_work_manager"
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:31.1.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.3.2'

    // Test
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "junit:junit:$version_junit"
    testImplementation "io.mockk:mockk:$version_mockk"
    testImplementation "org.hamcrest:hamcrest-library:$version_hamcrest"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutines"
    testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.1.9'

    // Android test
    androidTestImplementation 'org.junit.jupiter:junit-jupiter'
    androidTestImplementation "io.mockk:mockk-android:$version_mockk"
    androidTestImplementation "androidx.test.ext:junit:$version_junit_extensions"
    androidTestImplementation "androidx.test.espresso:espresso-core:$version_espresso_core"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$version_compose"
    debugImplementation "androidx.compose.ui:ui-tooling:$version_compose"

    debugImplementation("androidx.compose.ui:ui-test-manifest:$version_compose")
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
}
kapt {
    correctErrorTypes true
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "-F", "src/**/*.kt"
    jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
}