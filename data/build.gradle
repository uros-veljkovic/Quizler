plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.example.data'
    compileSdk 33

    compileSdkPreview = "UpsideDownCake"
    defaultConfig {
        minSdk 24
        multiDexEnabled true

        signingConfig signingConfigs.debug
    }
    configurations {
        ktlint
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {

        }
    }
    kotlin {
        jvmToolchain(17)
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

dependencies {
    api project(":util")

    // Ktlint
    ktlint "com.pinterest:ktlint:$version_ktlint"

    // Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_coroutines"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutines"

    // Gson
    implementation "com.google.code.gson:gson:$version_gson"

    // Retrofit
    api "com.squareup.retrofit2:retrofit:$version_retrofit"
    api "com.squareup.retrofit2:converter-gson:$version_retrofit"

    // Room
    api "androidx.room:room-runtime:$version_room"
    annotationProcessor "androidx.room:room-compiler:$version_room"
    kapt "androidx.room:room-compiler:$version_room"
    api "androidx.room:room-ktx:$version_room"

    // DataStore Preferences
    api "androidx.datastore:datastore-preferences:$version_datastore"

    // Test
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "junit:junit:$version_junit"
    testImplementation "io.mockk:mockk:$version_mockk"
    testImplementation "org.hamcrest:hamcrest-library:$version_hamcrest"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutines"
    testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.1.9'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "-F", "src/**/*.kt"
    jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
}